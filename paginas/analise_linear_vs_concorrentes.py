# utils/analise_linear_vs_concorrentes.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import statsmodels.api as sm

def analise_linear_vs_concorrentes(df):
    """
    Performs comparative analysis of Globo versus its competitors (Record, SBT, Band, etc.),
    showing side-by-side metrics, correlation analysis, and evolution over time.
    
    Args:
        df (DataFrame): Processed dataframe with LINEAR_ prefixed columns for all channels
    """
    
    st.header("ğŸ“Š TV Linear - Comparativo Globo vs Concorrentes")
    
    # 1. Header section with last update date
    if 'data_hora' in df.columns:
        last_date = df['data_hora'].max()
        if isinstance(last_date, pd.Timestamp):
            last_date = last_date.to_pydatetime()
        st.caption(f"Ãšltima atualizaÃ§Ã£o: {last_date.strftime('%d/%m/%Y')}")
    
    # Ensure data_hora is datetime type
    if 'data_hora' in df.columns and not pd.api.types.is_datetime64_dtype(df['data_hora']):
        df['data_hora'] = pd.to_datetime(df['data_hora'])
    
    # Create copies of the dataframe for each granularity
    
    # Create daily aggregation
    df_daily = df.copy()
    df_daily['data'] = df_daily['data_hora'].dt.date
    numeric_cols = df_daily.select_dtypes(include=['number']).columns.tolist()
    df_daily = df_daily.groupby('data')[numeric_cols].mean().reset_index()
    df_daily['data_hora'] = pd.to_datetime(df_daily['data'])
    
    # Create weekly aggregation
    df_weekly = df.copy()
    df_weekly['semana'] = df_weekly['data_hora'].dt.to_period('W').astype(str)
    numeric_cols = df_weekly.select_dtypes(include=['number']).columns.tolist()
    df_weekly = df_weekly.groupby('semana')[numeric_cols].mean().reset_index()
    df_weekly['data_hora'] = pd.to_datetime(df_weekly['semana'].str.split('/').str[0])
    
    st.markdown("""
    Esta anÃ¡lise compara o desempenho da Globo com seus principais concorrentes, permitindo visualizar:
    
    - MÃ©tricas mÃ©dias e desvios padrÃ£o de cada emissora
    - EvoluÃ§Ã£o histÃ³rica da Globo versus a mÃ©dia dos concorrentes
    - CorrelaÃ§Ã£o direta entre a Globo e concorrentes especÃ­ficos
    - SugestÃµes de mÃ©tricas relevantes para modelagem multivariada
    """)
    
    # Sidebar for selecting granularity and metric
    col1, col2 = st.columns(2)
    
    with col1:
        # Granularity Selection Dropdown
        granularity_options = {
            "DiÃ¡rio": df_daily,
            "Semanal": df_weekly,
        }
        
        granularity = st.selectbox(
            "Selecione a granularidade:",
            options=list(granularity_options.keys())
        )
    
    with col2:
        # Metric Selection Dropdown
        metric_options = {
            "cov% (cobertura)": "cov%",
            "shr% (share)": "shr%",
            "TVR% (rating)": "tvr%"
        }
        
        selected_metric_type = st.selectbox(
            "Selecione a mÃ©trica para comparaÃ§Ã£o:",
            options=list(metric_options.keys())
        )
    
    # Get the selected dataframe and metric suffix
    selected_df = granularity_options[granularity]
    metric_suffix = metric_options[selected_metric_type]
    
    # Identify competitors (those with LINEAR_ prefix but not GLOBO)
    competitors = []
    for col in selected_df.columns:
        if col.startswith('LINEAR_') and metric_suffix in col and 'GLOBO' not in col:
            # Extract channel name from column name
            channel = col.split('_')[1]
            if channel not in competitors:
                competitors.append(channel)
    
    if not competitors:
        st.warning("NÃ£o foram encontrados dados de concorrentes para comparaÃ§Ã£o.")
        return
    
    # 2. Metrics Table - Globo vs Competitors
    st.subheader("MÃ©tricas Resumidas - Globo vs Concorrentes")
    
    # Create comparison dataframe
    comparison_data = []
    
    # Add Globo data
    globo_col = f"LINEAR_GLOBO_{metric_suffix}"
    if globo_col in selected_df.columns:
        comparison_data.append({
            "Emissora": "Globo",
            "MÃ©trica": selected_metric_type,
            "MÃ©dia": selected_df[globo_col].mean(),
            "Desvio PadrÃ£o": selected_df[globo_col].std()
        })
    
    # Add competitors data
    for competitor in competitors:
        comp_col = f"LINEAR_{competitor}_{metric_suffix}"
        if comp_col in selected_df.columns:
            comparison_data.append({
                "Emissora": competitor,
                "MÃ©trica": selected_metric_type,
                "MÃ©dia": selected_df[comp_col].mean(),
                "Desvio PadrÃ£o": selected_df[comp_col].std()
            })
    
    # Create dataframe and format
    comparison_df = pd.DataFrame(comparison_data)
    comparison_df = comparison_df.sort_values('MÃ©dia', ascending=False)
    
    # Format for display
    display_df = comparison_df.copy()
    display_df['MÃ©dia'] = display_df['MÃ©dia'].map(lambda x: f"{x:.2f}")
    display_df['Desvio PadrÃ£o'] = display_df['Desvio PadrÃ£o'].map(lambda x: f"{x:.2f}")
    
    st.dataframe(display_df, hide_index=True, use_container_width=True)
    
    # 3. Aggregated Comparison - Globo vs Average Competitors
    st.subheader("ComparaÃ§Ã£o Agregada - Globo vs MÃ©dia Concorrentes")
    
    st.markdown("""
    Este grÃ¡fico compara a evoluÃ§Ã£o da Globo com a mÃ©dia dos concorrentes ao longo do tempo.
    Quando a linha da Globo estÃ¡ acima, indica superioridade em audiÃªncia; quando estÃ¡ abaixo,
    sugere que os concorrentes estÃ£o, em mÃ©dia, performando melhor.
    """)
    
    if globo_col in selected_df.columns:
        # Calculate average of competitors for each timestamp
        comp_cols = [f"LINEAR_{comp}_{metric_suffix}" for comp in competitors if f"LINEAR_{comp}_{metric_suffix}" in selected_df.columns]
        
        if comp_cols:
            selected_df['Concorrentes (MÃ©dia)'] = selected_df[comp_cols].mean(axis=1)
            
            # Create the comparison plot
            fig = go.Figure()
            
            # Add Globo trace
            fig.add_trace(go.Scatter(
                x=selected_df['data_hora'],
                y=selected_df[globo_col],
                mode='lines',
                name='Globo',
                line=dict(color='#0D47A1', width=3)  # Thick blue line for Globo
            ))
            
            # Add competitors average trace
            fig.add_trace(go.Scatter(
                x=selected_df['data_hora'],
                y=selected_df['Concorrentes (MÃ©dia)'],
                mode='lines',
                name='Concorrentes (MÃ©dia)',
                line=dict(color='#757575', width=2)  # Gray line for competitors
            ))
            
            fig.update_layout(
                title=f'EvoluÃ§Ã£o do {selected_metric_type} - Globo vs MÃ©dia dos Concorrentes ({granularity})',
                xaxis_title='Data',
                yaxis_title=selected_metric_type,
                legend=dict(orientation="h", y=1.1)
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Calculate correlation and market share
            corr = selected_df[globo_col].corr(selected_df['Concorrentes (MÃ©dia)'])
            
            # Calculate correlation on first differences (stationary series)
            # Create differenced series and drop NaN values
            globo_diff = selected_df[globo_col].diff().dropna()
            competitors_diff = selected_df['Concorrentes (MÃ©dia)'].diff().dropna()
            
            # Ensure indices match after dropping NaN values
            common_index = globo_diff.index.intersection(competitors_diff.index)
            corr_stationary = globo_diff.loc[common_index].corr(competitors_diff.loc[common_index])
            
            globo_avg = selected_df[globo_col].mean()
            competitors_avg = selected_df['Concorrentes (MÃ©dia)'].mean()
            total_avg = globo_avg + competitors_avg
            
            if total_avg > 0:
                globo_share = (globo_avg / total_avg) * 100
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        "CorrelaÃ§Ã£o Globo vs Concorrentes",
                        f"{corr:.2f}",
                        help="Uma correlaÃ§Ã£o prÃ³xima de 1 indica que Globo e concorrentes variam juntos, enquanto valores prÃ³ximos de -1 indicam variaÃ§Ã£o em direÃ§Ãµes opostas."
                    )
                
                with col2:
                    st.metric(
                        "CorrelaÃ§Ã£o Globo vs Concorrentes (EstacionÃ¡rio)",
                        f"{corr_stationary:.2f}",
                        help="CorrelaÃ§Ã£o calculada apÃ³s aplicar a primeira diferenÃ§a nas sÃ©ries temporais, removendo tendÃªncias e sazonalidades."
                    )
                
                with col3:
                    st.metric(
                        "ParticipaÃ§Ã£o MÃ©dia da Globo",
                        f"{globo_share:.1f}%",
                        help="Percentual mÃ©dio da Globo em relaÃ§Ã£o ao total (Globo + Concorrentes)."
                    )
                
                # Interpretation based on correlation
                st.markdown("### AnÃ¡lise da CorrelaÃ§Ã£o Agregada")
                
                if corr > 0.7:
                    st.info("""
                    **CorrelaÃ§Ã£o forte positiva**: Globo e concorrentes tendem a ter variaÃ§Ãµes muito semelhantes na audiÃªncia,
                    sugerindo que todos sÃ£o afetados pelos mesmos fatores externos (como feriados, eventos especiais, padrÃµes sazonais, etc).
                    """)
                elif corr > 0.3:
                    st.info("""
                    **CorrelaÃ§Ã£o moderada positiva**: Existe alguma tendÃªncia de variaÃ§Ã£o similar entre Globo e concorrentes,
                    mas cada um tambÃ©m tem seus prÃ³prios padrÃµes distintos de resposta ao mercado.
                    """)
                elif corr > -0.3:
                    st.info("""
                    **CorrelaÃ§Ã£o fraca**: Globo e concorrentes variam independentemente, sugerindo que atendem a pÃºblicos
                    diferentes ou que suas estratÃ©gias de programaÃ§Ã£o tÃªm efeitos distintos na audiÃªncia.
                    """)
                elif corr > -0.7:
                    st.info("""
                    **CorrelaÃ§Ã£o moderada negativa**: Quando a audiÃªncia da Globo sobe, a dos concorrentes tende a cair moderadamente,
                    e vice-versa, sugerindo algum nÃ­vel de competiÃ§Ã£o direta pela mesma audiÃªncia.
                    """)
                else:
                    st.info("""
                    **CorrelaÃ§Ã£o forte negativa**: Existe forte competiÃ§Ã£o direta entre Globo e concorrentes. Quando um ganha audiÃªncia,
                    o outro perde, sugerindo grande sobreposiÃ§Ã£o de pÃºblico-alvo e conteÃºdo substituto.
                    """)
                
                # Add interpretation for stationary correlation
                st.markdown("### AnÃ¡lise da CorrelaÃ§Ã£o EstacionÃ¡ria")
                if abs(corr - corr_stationary) > 0.3:
                    st.info(f"""
                    **DiferenÃ§a significativa entre correlaÃ§Ãµes**: A correlaÃ§Ã£o das sÃ©ries estacionÃ¡rias ({corr_stationary:.2f}) 
                    Ã© bastante diferente da correlaÃ§Ã£o das sÃ©ries originais ({corr:.2f}), o que sugere que grande parte da 
                    correlaÃ§Ã£o original era influenciada por tendÃªncias comuns ou sazonalidade, e nÃ£o por uma relaÃ§Ã£o causal direta.
                    """)
                else:
                    st.info(f"""
                    **CorrelaÃ§Ãµes similares**: A correlaÃ§Ã£o das sÃ©ries estacionÃ¡rias ({corr_stationary:.2f}) Ã© semelhante Ã  
                    correlaÃ§Ã£o das sÃ©ries originais ({corr:.2f}), o que reforÃ§a a robustez da relaÃ§Ã£o identificada, indicando 
                    que as variaÃ§Ãµes de curto prazo entre Globo e concorrentes mantÃªm padrÃ£o similar Ã  tendÃªncia geral.
                    """)
        else:
            st.warning("Dados insuficientes de concorrentes para criar a comparaÃ§Ã£o agregada.")
    else:
        st.warning(f"A mÃ©trica {selected_metric_type} nÃ£o estÃ¡ disponÃ­vel para a Globo.")
    
    # 4. Direct Comparison - Globo vs Specific Competitor
    st.subheader("ComparaÃ§Ã£o Direta - Globo vs Concorrente EspecÃ­fico")
    
    st.markdown("""
    Selecione um concorrente especÃ­fico para analisar sua relaÃ§Ã£o direta com a Globo. 
    A anÃ¡lise mostra a evoluÃ§Ã£o lado a lado, correlaÃ§Ã£o e, quando aplicÃ¡vel, a equaÃ§Ã£o 
    que relaciona as audiÃªncias das duas emissoras.
    """)
    
    # Dropdown to select specific competitor
    selected_competitor = st.selectbox(
        "Selecione um concorrente para comparaÃ§Ã£o detalhada:",
        options=competitors
    )
    
    if selected_competitor:
        comp_col = f"LINEAR_{selected_competitor}_{metric_suffix}"
        
        if globo_col in selected_df.columns and comp_col in selected_df.columns:
            # Create direct comparison plot
            fig = go.Figure()
            
            # Add Globo trace
            fig.add_trace(go.Scatter(
                x=selected_df['data_hora'],
                y=selected_df[globo_col],
                mode='lines',
                name='Globo',
                line=dict(color='#0D47A1', width=3)  # Thick blue line for Globo
            ))
            
            # Add competitor trace
            fig.add_trace(go.Scatter(
                x=selected_df['data_hora'],
                y=selected_df[comp_col],
                mode='lines',
                name=selected_competitor,
                line=dict(color='#D32F2F', width=2)  # Red line for competitor
            ))
            
            fig.update_layout(
                title=f'EvoluÃ§Ã£o do {selected_metric_type} - Globo vs {selected_competitor} ({granularity})',
                xaxis_title='Data',
                yaxis_title=selected_metric_type,
                legend=dict(orientation="h", y=1.1)
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Calculate correlation between Globo and selected competitor
            corr = selected_df[globo_col].corr(selected_df[comp_col])
            
            # Calculate correlation on first differences (stationary series)
            # Create differenced series and drop NaN values
            globo_diff = selected_df[globo_col].diff().dropna()
            competitor_diff = selected_df[comp_col].diff().dropna()
            
            # Ensure indices match after dropping NaN values
            common_index = globo_diff.index.intersection(competitor_diff.index)
            corr_stationary = globo_diff.loc[common_index].corr(competitor_diff.loc[common_index])
            
            # Calculate average metrics
            globo_avg = selected_df[globo_col].mean()
            comp_avg = selected_df[comp_col].mean()
            total_avg = globo_avg + comp_avg
            
            if total_avg > 0:
                globo_share = (globo_avg / total_avg) * 100
                ratio = globo_avg / comp_avg if comp_avg > 0 else float('inf')
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        f"CorrelaÃ§Ã£o Globo vs {selected_competitor}",
                        f"{corr:.2f}",
                        help="Uma correlaÃ§Ã£o prÃ³xima de 1 indica que as emissoras variam juntas, enquanto valores prÃ³ximos de -1 indicam variaÃ§Ã£o em direÃ§Ãµes opostas."
                    )
                
                with col2:
                    st.metric(
                        f"CorrelaÃ§Ã£o Globo vs {selected_competitor} (EstacionÃ¡rio)",
                        f"{corr_stationary:.2f}",
                        help="CorrelaÃ§Ã£o calculada apÃ³s aplicar a primeira diferenÃ§a nas sÃ©ries temporais, removendo tendÃªncias e sazonalidades."
                    )
                
                with col3:
                    st.metric(
                        f"ParticipaÃ§Ã£o da Globo vs {selected_competitor}",
                        f"{globo_share:.1f}%",
                        help=f"Percentual da Globo em relaÃ§Ã£o ao total (Globo + {selected_competitor})."
                    )
                
                with col4:
                    st.metric(
                        "ProporÃ§Ã£o Globo/Concorrente",
                        f"{ratio:.2f}x",
                        help=f"Quantas vezes a audiÃªncia da Globo Ã© maior que a do {selected_competitor}."
                    )
                
                # If correlation is strong, show regression equation
                if abs(corr) > 0.6:
                    st.markdown("### EquaÃ§Ã£o de RegressÃ£o Linear")
                    
                    # Fit linear regression model
                    X = selected_df[comp_col].values.reshape(-1, 1)
                    X = sm.add_constant(X)  # Add constant term
                    y = selected_df[globo_col].values
                    
                    model = sm.OLS(y, X).fit()
                    
                    # Get coefficients
                    intercept = model.params[0]
                    slope = model.params[1]
                    
                    # Display equation
                    st.markdown(f"""
                    Como a correlaÃ§Ã£o Ã© {abs(corr):.2f}, forte o suficiente, podemos estabelecer uma 
                    relaÃ§Ã£o direta entre a audiÃªncia das duas emissoras:
                    
                    **Globo {metric_suffix} = {intercept:.4f} + {slope:.4f} Ã— {selected_competitor} {metric_suffix}**
                    
                    Esta equaÃ§Ã£o indica que:
                    
                    - O valor base da Globo Ã© {intercept:.4f} mesmo quando {selected_competitor} tem audiÃªncia zero
                    - Para cada 1 ponto no {metric_suffix} do {selected_competitor}, a Globo {('ganha' if slope > 0 else 'perde')} {abs(slope):.4f} pontos
                    """)
                    
                    # Create scatter plot with regression line
                    fig_scatter = px.scatter(
                        selected_df, 
                        x=comp_col, 
                        y=globo_col,
                        trendline="ols",
                        labels={
                            comp_col: f"{selected_competitor} {metric_suffix}",
                            globo_col: f"Globo {metric_suffix}"
                        },
                        title=f"RelaÃ§Ã£o entre Globo e {selected_competitor}"
                    )
                    
                    st.plotly_chart(fig_scatter, use_container_width=True)
                
                # Interpretation based on correlation
                st.markdown(f"### AnÃ¡lise da CorrelaÃ§Ã£o com {selected_competitor}")
                
                if corr > 0.7:
                    st.info(f"""
                    **CorrelaÃ§Ã£o forte positiva**: Globo e {selected_competitor} tendem a ter variaÃ§Ãµes muito semelhantes na audiÃªncia,
                    sugerindo que ambos sÃ£o afetados pelos mesmos fatores ou atendem a pÃºblicos similares em momentos semelhantes.
                    """)
                elif corr > 0.3:
                    st.info(f"""
                    **CorrelaÃ§Ã£o moderada positiva**: Existe algum nÃ­vel de similaridade entre os padrÃµes de audiÃªncia da Globo e do {selected_competitor},
                    mas cada um tambÃ©m tem seus momentos Ãºnicos de pico ou queda.
                    """)
                elif corr > -0.3:
                    st.info(f"""
                    **CorrelaÃ§Ã£o fraca**: Globo e {selected_competitor} parecem operar com certa independÃªncia, atendendo a pÃºblicos
                    diferentes ou com estratÃ©gias de programaÃ§Ã£o que resultam em padrÃµes distintos de audiÃªncia.
                    """)
                elif corr > -0.7:
                    st.info(f"""
                    **CorrelaÃ§Ã£o moderada negativa**: Existe uma tendÃªncia de que quando a audiÃªncia da Globo aumenta, a do {selected_competitor} diminui,
                    e vice-versa, sugerindo competiÃ§Ã£o direta pelo mesmo pÃºblico em determinados horÃ¡rios.
                    """)
                else:
                    st.info(f"""
                    **CorrelaÃ§Ã£o forte negativa**: HÃ¡ uma clara relaÃ§Ã£o inversa entre as audiÃªncias da Globo e do {selected_competitor},
                    indicando forte competiÃ§Ã£o pelo mesmo pÃºblico e conteÃºdos altamente substitutos.
                    """)
                
                # Add interpretation for stationary correlation
                st.markdown(f"### AnÃ¡lise da CorrelaÃ§Ã£o EstacionÃ¡ria com {selected_competitor}")
                if abs(corr - corr_stationary) > 0.3:
                    st.info(f"""
                    **DiferenÃ§a significativa entre correlaÃ§Ãµes**: A correlaÃ§Ã£o das sÃ©ries estacionÃ¡rias ({corr_stationary:.2f}) 
                    Ã© bastante diferente da correlaÃ§Ã£o das sÃ©ries originais ({corr:.2f}), o que sugere que grande parte da 
                    correlaÃ§Ã£o original era influenciada por tendÃªncias comuns ou sazonalidade, e nÃ£o por uma relaÃ§Ã£o causal direta 
                    entre Globo e {selected_competitor}.
                    """)
                else:
                    st.info(f"""
                    **CorrelaÃ§Ãµes similares**: A correlaÃ§Ã£o das sÃ©ries estacionÃ¡rias ({corr_stationary:.2f}) Ã© semelhante Ã  
                    correlaÃ§Ã£o das sÃ©ries originais ({corr:.2f}), o que reforÃ§a a robustez da relaÃ§Ã£o identificada, indicando 
                    que as variaÃ§Ãµes de curto prazo entre Globo e {selected_competitor} mantÃªm padrÃ£o similar Ã  tendÃªncia geral.
                    """)
            else:
                st.warning("Dados insuficientes para calcular mÃ©tricas comparativas.")
        else:
            st.warning(f"A mÃ©trica {selected_metric_type} nÃ£o estÃ¡ disponÃ­vel para Globo ou {selected_competitor}.")
    
    # 5. Suggested External Metrics for Multivariate Modeling
    st.subheader("SugestÃ£o de MÃ©tricas Externas Relevantes para Modelagem Multivariada")
    
    st.markdown("""
    Com base nas correlaÃ§Ãµes detectadas, estas sÃ£o as mÃ©tricas de concorrentes que podem ser mais relevantes 
    para incluir em modelos multivariados que buscam explicar ou prever a audiÃªncia da Globo.
    """)
    
    if globo_col in selected_df.columns and competitors:
        # Calculate correlations between Globo and each competitor for different metrics
        correlation_data = []
        
        for competitor in competitors:
            for metric in ['cov%', 'shr%', 'tvr%']:
                comp_col = f"LINEAR_{competitor}_{metric}"
                
                if comp_col in selected_df.columns:
                    corr = selected_df[globo_col].corr(selected_df[comp_col])
                    
                    correlation_data.append({
                        'Concorrente': competitor,
                        'MÃ©trica Relevante': metric,
                        'CorrelaÃ§Ã£o com cov% Globo': corr
                    })
        
        # Sort by absolute correlation value
        if correlation_data:
            correlation_df = pd.DataFrame(correlation_data)
            correlation_df['CorrelaÃ§Ã£o Abs'] = correlation_df['CorrelaÃ§Ã£o com cov% Globo'].abs()
            correlation_df = correlation_df.sort_values('CorrelaÃ§Ã£o Abs', ascending=False).drop('CorrelaÃ§Ã£o Abs', axis=1)
            
            # Take top correlations (up to 5)
            top_correlations = correlation_df.head(5)
            
            # Format for display
            display_corr_df = top_correlations.copy()
            display_corr_df['CorrelaÃ§Ã£o com cov% Globo'] = display_corr_df['CorrelaÃ§Ã£o com cov% Globo'].map(lambda x: f"{x:.2f}")
            
            st.dataframe(display_corr_df, hide_index=True, use_container_width=True)
            
            # Visualization of top correlations
            fig_corr = px.bar(
                top_correlations,
                x='Concorrente',
                y='CorrelaÃ§Ã£o com cov% Globo',
                color='CorrelaÃ§Ã£o com cov% Globo',
                color_continuous_scale=['red', 'white', 'green'],
                title="CorrelaÃ§Ãµes mais Significativas com cov% Globo"
            )
            
            st.plotly_chart(fig_corr, use_container_width=True)
            
            # List top positive and negative correlations
            top_positive = correlation_df[correlation_df['CorrelaÃ§Ã£o com cov% Globo'] > 0].head(1)
            top_negative = correlation_df[correlation_df['CorrelaÃ§Ã£o com cov% Globo'] < 0].head(1)
            
            if not top_positive.empty:
                positive_corr = top_positive.iloc[0]
                st.success(f"""
                âœ… **Concorrente mais correlacionado positivamente**: {positive_corr['Concorrente']} ({positive_corr['MÃ©trica Relevante']})
                com correlaÃ§Ã£o de {positive_corr['CorrelaÃ§Ã£o com cov% Globo']:.2f}
                """)
            
            if not top_negative.empty:
                negative_corr = top_negative.iloc[0]
                st.error(f"""
                âœ… **Concorrente mais correlacionado negativamente**: {negative_corr['Concorrente']} ({negative_corr['MÃ©trica Relevante']})
                com correlaÃ§Ã£o de {negative_corr['CorrelaÃ§Ã£o com cov% Globo']:.2f}
                """)
        else:
            st.warning("Dados insuficientes para calcular correlaÃ§Ãµes entre mÃ©tricas.")
    else:
        st.warning("Dados insuficientes para recomendar mÃ©tricas externas.")
    
    # 6. Final Conclusions
    st.subheader("ConclusÃµes Finais - ComparaÃ§Ã£o com Concorrentes")
    
    st.markdown("""
    ## Principais Insights
    
    - **Posicionamento relativo:** A anÃ¡lise revela a posiÃ§Ã£o da Globo em relaÃ§Ã£o aos concorrentes,
    tanto em valores mÃ©dios quanto em tendÃªncias temporais.
    
    - **CorrelaÃ§Ãµes importantes:** Identificamos quais concorrentes apresentam maior correlaÃ§Ã£o
    (positiva ou negativa) com a audiÃªncia da Globo, o que Ã© fundamental para entender dinÃ¢micas de mercado.
    
    - **CorrelaÃ§Ãµes estacionÃ¡rias:** A anÃ¡lise das sÃ©ries temporais apÃ³s aplicar a primeira diferenÃ§a
    permite entender relaÃ§Ãµes mais robustas entre as emissoras, removendo o efeito de tendÃªncias comuns.
    
    - **EquaÃ§Ãµes preditivas:** Para correlaÃ§Ãµes fortes, estabelecemos equaÃ§Ãµes lineares que
    permitem estimar o comportamento da audiÃªncia da Globo com base em concorrentes especÃ­ficos.
    
    - **SugestÃµes para modelagem:** As mÃ©tricas mais relevantes de concorrentes foram identificadas
    para inclusÃ£o em modelos multivariados, possibilitando anÃ¡lises mais robustas.
    
    Estes insights complementam a anÃ¡lise isolada da Globo, permitindo um entendimento mais
    completo do mercado de TV Linear e das dinÃ¢micas competitivas que influenciam a audiÃªncia.
    """)
    
    with st.expander("ObservaÃ§Ã£o MetodolÃ³gica"):
        st.markdown("""
        ### ImportÃ¢ncia da AnÃ¡lise Competitiva
        
        A anÃ¡lise comparativa com concorrentes Ã© especialmente valiosa por:
        
        1. **ContextualizaÃ§Ã£o:** Entender se tendÃªncias observadas na Globo sÃ£o especÃ­ficas da emissora ou 
        refletem movimentos do mercado como um todo
        
        2. **IdentificaÃ§Ã£o de padrÃµes de substituiÃ§Ã£o:** Detectar se a audiÃªncia migra entre canais ou 
        simplesmente deixa de assistir TV Linear
        
        3. **Modelagem mais precisa:** Incluir mÃ©tricas de concorrentes pode melhorar significativamente 
        a precisÃ£o de modelos preditivos para a audiÃªncia da Globo
        
        4. **AnÃ¡lise estacionÃ¡ria:** A correlaÃ§Ã£o em sÃ©ries estacionÃ¡rias (apÃ³s diferenciaÃ§Ã£o) Ã© essencial 
        para eliminar relaÃ§Ãµes espÃºrias e identificar relaÃ§Ãµes causais mais confiÃ¡veis entre variÃ¡veis
        
        A separaÃ§Ã£o desta anÃ¡lise em uma aba especÃ­fica permite um foco metodolÃ³gico claro, 
        facilitando tanto a interpretaÃ§Ã£o dos dados quanto a aplicaÃ§Ã£o dos insights em estratÃ©gias 
        de programaÃ§Ã£o e posicionamento competitivo.
        """)