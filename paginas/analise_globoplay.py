# utils/analise_globoplay.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def analise_globoplay(df):
    """
    Performs in-depth analysis of Globoplay data with multiple granularities,
    showing user metrics, comparisons between user types, devices, and consumption patterns.
    Also analyzes correlation with TV Linear metrics.
    
    Args:
        df (DataFrame): Processed dataframe with GP_ and LINEAR_ prefixed columns
    """
    
    st.header("üé¨ Globoplay - Consumo e Usu√°rios")
    
    # 1. Header section with last update date
    if 'data_hora' in df.columns:
        last_date = df['data_hora'].max()
        if isinstance(last_date, pd.Timestamp):
            last_date = last_date.to_pydatetime()
        st.caption(f"√öltima atualiza√ß√£o: {last_date.strftime('%d/%m/%Y')}")
    
    # Ensure data_hora is datetime type
    if 'data_hora' in df.columns and not pd.api.types.is_datetime64_dtype(df['data_hora']):
        df['data_hora'] = pd.to_datetime(df['data_hora'])
    
    # Create copies of the dataframe for each granularity
    
    # Create daily aggregation
    df_daily = df.copy()
    df_daily['data'] = df_daily['data_hora'].dt.date
    
    # Filter numeric columns for aggregation (to avoid categorical type error)
    numeric_cols = df_daily.select_dtypes(include=['number']).columns.tolist()
    if 'data' in numeric_cols:
        numeric_cols.remove('data')
    
    # Group by date for numeric columns only
    df_daily = df_daily.groupby('data')[numeric_cols].mean().reset_index()
    df_daily['data_hora'] = pd.to_datetime(df_daily['data'])
    
    # Create weekly aggregation
    df_weekly = df.copy()
    df_weekly['semana'] = df_weekly['data_hora'].dt.to_period('W').astype(str)
    
    # Group by week for numeric columns only
    df_weekly = df_weekly.groupby('semana')[numeric_cols].mean().reset_index()
    df_weekly['data_hora'] = pd.to_datetime(df_weekly['semana'].str.split('/').str[0])
    
    # 2. Granularity Selection Dropdown
    granularity_options = {
        "Di√°rio": df_daily,
        "Semanal": df_weekly,
    }
    
    st.markdown("""
    ### An√°lise do Consumo de Globoplay

    Esta an√°lise explora os padr√µes de consumo do Globoplay, examinando diferentes tipos de usu√°rios, dispositivos utilizados e tipos de conte√∫do consumido. Os dados s√£o agrupados por per√≠odo de tempo para identificar tend√™ncias gerais e correla√ß√µes com a audi√™ncia da TV Linear.
    """)
    
    st.markdown("""
    **Recomenda√ß√£o:** Para an√°lises mais detalhadas e precisas, recomenda-se utilizar a granularidade **Di√°ria**, pois oferece uma vis√£o mais granular do comportamento dos usu√°rios e permite identificar padr√µes que podem ser mascarados em agrupamentos semanais.
    """)
    
    granularity = st.selectbox(
        "Selecione a granularidade:",
        options=list(granularity_options.keys())
    )
    
    # Get the selected dataframe
    selected_df = granularity_options[granularity]
    
    # 3. Metrics Tables
    st.subheader("M√©tricas Resumidas")
    
    st.markdown("""
    As tabelas abaixo apresentam m√©tricas-chave do Globoplay organizadas em tr√™s grupos principais:
    
    1. **Tipos de Usu√°rio**: Assinantes, Logados Free e An√¥nimos - mostra diferen√ßas de comportamento por tipo de acesso
    2. **Dispositivos**: Mobile vs Outros Devices - revela prefer√™ncias de visualiza√ß√£o em diferentes plataformas
    3. **Tipos de Conte√∫do**: Simulcasting (ao vivo) vs VOD (sob demanda) - ilustra padr√µes de consumo por formato
    
    Cada m√©trica inclui valor m√©dio, desvio padr√£o e, quando aplic√°vel, a m√©dia por usu√°rio (que revela intensidade de uso).
    """)
    
    # Check if we have the required columns for each table
    required_cols_table1 = [
        'GP_usu√°rios_assinantes_', 'GP_horas_consumidas_assinantes',
        'GP_usu√°rios_de_v√≠deo_logados_free', 'GP_horas_consumidas_de_logados_free',
        'GP_usu√°rios_anonimos', 'GP_horas_consumidas_de_anonimos'
    ]
    
    required_cols_table2 = [
        'GP_usu√°rios_em_mobile', 'GP_horas_consumidas_mobile',
        'GP_usu√°rios_em_demais_devices', 'GP_horas_consumidas_em_demais_devices'
    ]
    
    required_cols_table3 = [
        'GP_usu√°rios_em_tvg_ao_vivo', 'GP_horas_consumidas_em_tvg_ao_vivo',
        'GP_qtd_de_integras_publicadas', 'GP_qtd_de_horas_dispon√≠veis_integras'
    ]
    
    # Function to create metrics table
    def create_metrics_table(data_df, metrics_dict):
        metrics_data = []
        for label, col_name in metrics_dict.items():
            if col_name in data_df.columns:
                metrics_data.append({
                    "M√©trica": label,
                    "Valor M√©dio": f"{data_df[col_name].mean():.2f}",
                    "Desvio Padr√£o": f"{data_df[col_name].std():.2f}",
                    "N√∫mero de Linhas": f"{len(data_df)}"
                })
            else:
                metrics_data.append({
                    "M√©trica": label,
                    "Valor M√©dio": "N/A",
                    "Desvio Padr√£o": "N/A",
                    "N√∫mero de Linhas": "N/A"
                })
        
        return pd.DataFrame(metrics_data)
    
    # ROW 1: Assinantes vs Logados Free vs An√¥nimos
    row1_col1, row1_col2 = st.columns(2)
    
    # Left column: Reach metrics (users)
    with row1_col1:
        st.markdown("### Usu√°rios: Assinantes vs Logados Free vs An√¥nimos")
        
        reach_metrics = {
            "Usu√°rios Assinantes": "GP_usu√°rios_assinantes_",
            "Usu√°rios Logados Free": "GP_usu√°rios_de_v√≠deo_logados_free",
            "Usu√°rios An√¥nimos": "GP_usu√°rios_anonimos"
        }
        
        reach_df = create_metrics_table(selected_df, reach_metrics)
        st.dataframe(reach_df, hide_index=True)
    
    # Right column: Engagement metrics (hours) + avg per user
    with row1_col2:
        st.markdown("### Horas: Assinantes vs Logados Free vs An√¥nimos")
        
        engagement_metrics = {
            "Horas Consumidas Assinantes": "GP_horas_consumidas_assinantes",
            "Horas Consumidas Logados Free": "GP_horas_consumidas_de_logados_free",
            "Horas Consumidas An√¥nimos": "GP_horas_consumidas_de_anonimos"
        }
        
        # Create basic metrics table
        engagement_df = create_metrics_table(selected_df, engagement_metrics)
        
        # Calculate average hours per user
        avg_hours_data = []
        
        # Check if columns exist before calculating
        has_assinantes = ("GP_horas_consumidas_assinantes" in selected_df.columns and 
                          "GP_usu√°rios_assinantes_" in selected_df.columns)
        has_logados = ("GP_horas_consumidas_de_logados_free" in selected_df.columns and 
                       "GP_usu√°rios_de_v√≠deo_logados_free" in selected_df.columns)
        has_anonimos = ("GP_horas_consumidas_de_anonimos" in selected_df.columns and 
                        "GP_usu√°rios_anonimos" in selected_df.columns)
        
        # Assinantes
        if has_assinantes:
            assinantes_hours = selected_df["GP_horas_consumidas_assinantes"].mean()
            assinantes_users = selected_df["GP_usu√°rios_assinantes_"].mean()
            avg_assinantes = assinantes_hours / assinantes_users if assinantes_users > 0 else 0
            avg_hours_data.append({
                "M√©trica": "Horas M√©dias por Assinante",
                "Valor M√©dio": f"{avg_assinantes:.2f}",
                "Desvio Padr√£o": "N/A",
                "N√∫mero de Linhas": f"{len(selected_df)}"
            })
        
        # Logados Free
        if has_logados:
            logados_hours = selected_df["GP_horas_consumidas_de_logados_free"].mean()
            logados_users = selected_df["GP_usu√°rios_de_v√≠deo_logados_free"].mean()
            avg_logados = logados_hours / logados_users if logados_users > 0 else 0
            avg_hours_data.append({
                "M√©trica": "Horas M√©dias por Logado Free",
                "Valor M√©dio": f"{avg_logados:.2f}",
                "Desvio Padr√£o": "N/A",
                "N√∫mero de Linhas": f"{len(selected_df)}"
            })
        
        # An√¥nimos
        if has_anonimos:
            anonimos_hours = selected_df["GP_horas_consumidas_de_anonimos"].mean()
            anonimos_users = selected_df["GP_usu√°rios_anonimos"].mean()
            avg_anonimos = anonimos_hours / anonimos_users if anonimos_users > 0 else 0
            avg_hours_data.append({
                "M√©trica": "Horas M√©dias por An√¥nimo",
                "Valor M√©dio": f"{avg_anonimos:.2f}",
                "Desvio Padr√£o": "N/A",
                "N√∫mero de Linhas": f"{len(selected_df)}"
            })
        
        # Add to table if we have data
        if avg_hours_data:
            avg_hours_df = pd.DataFrame(avg_hours_data)
            
            # Combine tables
            combined_df = pd.concat([engagement_df, avg_hours_df])
            st.dataframe(combined_df, hide_index=True)
        else:
            st.dataframe(engagement_df, hide_index=True)
    
    # ROW 2: Mobile vs Outros Devices
    row2_col1, row2_col2 = st.columns(2)
    
    # Left column: Reach metrics (users)
    with row2_col1:
        st.markdown("### Usu√°rios: Mobile vs Outros Devices")
        
        reach_metrics = {
            "Usu√°rios Mobile": "GP_usu√°rios_em_mobile",
            "Usu√°rios Outros Devices": "GP_usu√°rios_em_demais_devices"
        }
        
        reach_df = create_metrics_table(selected_df, reach_metrics)
        st.dataframe(reach_df, hide_index=True)
    
    # Right column: Engagement metrics (hours) + avg per user
    with row2_col2:
        st.markdown("### Horas: Mobile vs Outros Devices")
        
        engagement_metrics = {
            "Horas Consumidas Mobile": "GP_horas_consumidas_mobile",
            "Horas Consumidas Outros Devices": "GP_horas_consumidas_em_demais_devices"
        }
        
        # Create basic metrics table
        engagement_df = create_metrics_table(selected_df, engagement_metrics)
        
        # Calculate average hours per user
        avg_hours_data = []
        
        # Check if columns exist before calculating
        has_mobile = ("GP_horas_consumidas_mobile" in selected_df.columns and 
                      "GP_usu√°rios_em_mobile" in selected_df.columns)
        has_outros = ("GP_horas_consumidas_em_demais_devices" in selected_df.columns and 
                      "GP_usu√°rios_em_demais_devices" in selected_df.columns)
        
        # Mobile
        if has_mobile:
            mobile_hours = selected_df["GP_horas_consumidas_mobile"].mean()
            mobile_users = selected_df["GP_usu√°rios_em_mobile"].mean()
            avg_mobile = mobile_hours / mobile_users if mobile_users > 0 else 0
            avg_hours_data.append({
                "M√©trica": "Horas M√©dias por Usu√°rio Mobile",
                "Valor M√©dio": f"{avg_mobile:.2f}",
                "Desvio Padr√£o": "N/A",
                "N√∫mero de Linhas": f"{len(selected_df)}"
            })
        
        # Outros Devices
        if has_outros:
            outros_hours = selected_df["GP_horas_consumidas_em_demais_devices"].mean()
            outros_users = selected_df["GP_usu√°rios_em_demais_devices"].mean()
            avg_outros = outros_hours / outros_users if outros_users > 0 else 0
            avg_hours_data.append({
                "M√©trica": "Horas M√©dias por Usu√°rio Outros Devices",
                "Valor M√©dio": f"{avg_outros:.2f}",
                "Desvio Padr√£o": "N/A",
                "N√∫mero de Linhas": f"{len(selected_df)}"
            })
        
        # Add to table if we have data
        if avg_hours_data:
            avg_hours_df = pd.DataFrame(avg_hours_data)
            
            # Combine tables
            combined_df = pd.concat([engagement_df, avg_hours_df])
            st.dataframe(combined_df, hide_index=True)
        else:
            st.dataframe(engagement_df, hide_index=True)
    
    # ROW 3: Simulcasting vs VOD
    row3_col1, row3_col2 = st.columns(2)
    
    # Left column: Reach metrics (users)
    with row3_col1:
        st.markdown("### Usu√°rios: Simulcasting (TVG ao Vivo) vs VOD")
        
        reach_metrics = {
            "Usu√°rios TVG ao Vivo": "GP_usu√°rios_em_tvg_ao_vivo",
            "Qtd √çntegras Publicadas": "GP_qtd_de_integras_publicadas"
        }
        
        reach_df = create_metrics_table(selected_df, reach_metrics)
        st.dataframe(reach_df, hide_index=True)
    
    # Right column: Engagement metrics (hours) + avg per user
    with row3_col2:
        st.markdown("### Horas: Simulcasting (TVG ao Vivo) vs VOD")
        
        engagement_metrics = {
            "Horas Consumidas TVG ao Vivo": "GP_horas_consumidas_em_tvg_ao_vivo",
            "Horas Dispon√≠veis √çntegras": "GP_qtd_de_horas_dispon√≠veis_integras"
        }
        
        # Create basic metrics table
        engagement_df = create_metrics_table(selected_df, engagement_metrics)
        
        # Calculate average hours per user/item
        avg_hours_data = []
        
        # Check if columns exist before calculating
        has_tvg = ("GP_horas_consumidas_em_tvg_ao_vivo" in selected_df.columns and 
                   "GP_usu√°rios_em_tvg_ao_vivo" in selected_df.columns)
        has_vod = ("GP_qtd_de_horas_dispon√≠veis_integras" in selected_df.columns and 
                   "GP_qtd_de_integras_publicadas" in selected_df.columns)
        
        # TVG ao Vivo
        if has_tvg:
            tvg_hours = selected_df["GP_horas_consumidas_em_tvg_ao_vivo"].mean()
            tvg_users = selected_df["GP_usu√°rios_em_tvg_ao_vivo"].mean()
            avg_tvg = tvg_hours / tvg_users if tvg_users > 0 else 0
            avg_hours_data.append({
                "M√©trica": "Horas M√©dias por Usu√°rio TVG ao Vivo",
                "Valor M√©dio": f"{avg_tvg:.2f}",
                "Desvio Padr√£o": "N/A",
                "N√∫mero de Linhas": f"{len(selected_df)}"
            })
        
        # √çntegras (VOD) - horas por √≠ntegra publicada
        if has_vod:
            vod_hours = selected_df["GP_qtd_de_horas_dispon√≠veis_integras"].mean()
            vod_items = selected_df["GP_qtd_de_integras_publicadas"].mean()
            avg_vod = vod_hours / vod_items if vod_items > 0 else 0
            avg_hours_data.append({
                "M√©trica": "Horas M√©dias por √çntegra Publicada",
                "Valor M√©dio": f"{avg_vod:.2f}",
                "Desvio Padr√£o": "N/A",
                "N√∫mero de Linhas": f"{len(selected_df)}"
            })
        
        # Add to table if we have data
        if avg_hours_data:
            avg_hours_df = pd.DataFrame(avg_hours_data)
            
            # Combine tables
            combined_df = pd.concat([engagement_df, avg_hours_df])
            st.dataframe(combined_df, hide_index=True)
        else:
            st.dataframe(engagement_df, hide_index=True)
    
    # Now add correlation with TV Linear (if available)
    if 'LINEAR_GLOBO_cov%' in selected_df.columns:
        st.markdown("""
        ### Correla√ß√£o com TV Linear
        
        As m√©tricas abaixo mostram a correla√ß√£o entre diferentes categorias de uso do Globoplay e a cobertura da TV Linear (cov%). 
        Valores pr√≥ximos a 1 indicam forte rela√ß√£o positiva (aumentam juntos), valores pr√≥ximos a 0 indicam pouca rela√ß√£o, 
        e valores negativos indicam rela√ß√£o inversa (quando um aumenta, o outro diminui).
        """)
        
        # Create columns for correlation cards
        corr_cols = st.columns(3)
        
        # Row 1 - Assinantes vs Logados vs An√¥nimos
        with corr_cols[0]:
            st.subheader("Tipo de Usu√°rio")
            
            # Calculate correlations
            corr_metrics = []
            
            if "GP_horas_consumidas_assinantes" in selected_df.columns:
                corr_assinantes = selected_df['GP_horas_consumidas_assinantes'].corr(selected_df['LINEAR_GLOBO_cov%'])
                st.metric("Assinantes", f"{corr_assinantes:.2f}")
            
            if "GP_horas_consumidas_de_logados_free" in selected_df.columns:
                corr_logados = selected_df['GP_horas_consumidas_de_logados_free'].corr(selected_df['LINEAR_GLOBO_cov%'])
                st.metric("Logados Free", f"{corr_logados:.2f}")
            
            if "GP_horas_consumidas_de_anonimos" in selected_df.columns:
                corr_anonimos = selected_df['GP_horas_consumidas_de_anonimos'].corr(selected_df['LINEAR_GLOBO_cov%'])
                st.metric("An√¥nimos", f"{corr_anonimos:.2f}")
        
        # Row 2 - Mobile vs Outros Devices
        with corr_cols[1]:
            st.subheader("Tipo de Device")
            
            # Calculate correlations
            if "GP_horas_consumidas_mobile" in selected_df.columns:
                corr_mobile = selected_df['GP_horas_consumidas_mobile'].corr(selected_df['LINEAR_GLOBO_cov%'])
                st.metric("Mobile", f"{corr_mobile:.2f}")
            
            if "GP_horas_consumidas_em_demais_devices" in selected_df.columns:
                corr_outros = selected_df['GP_horas_consumidas_em_demais_devices'].corr(selected_df['LINEAR_GLOBO_cov%'])
                st.metric("Outros Devices", f"{corr_outros:.2f}")
        
        # Row 3 - Simulcasting vs VOD
        with corr_cols[2]:
            st.subheader("Tipo de Conte√∫do")
            
            # Calculate correlations
            if "GP_horas_consumidas_em_tvg_ao_vivo" in selected_df.columns:
                corr_tvg = selected_df['GP_horas_consumidas_em_tvg_ao_vivo'].corr(selected_df['LINEAR_GLOBO_cov%'])
                st.metric("TVG ao Vivo", f"{corr_tvg:.2f}")
            
            if "GP_qtd_de_horas_dispon√≠veis_integras" in selected_df.columns:
                corr_vod = selected_df['GP_qtd_de_horas_dispon√≠veis_integras'].corr(selected_df['LINEAR_GLOBO_cov%'])
                st.metric("VOD (√çntegras)", f"{corr_vod:.2f}")
    
    # Visualization Section
    st.subheader("Visualiza√ß√µes")
    
    st.markdown("""
    Os gr√°ficos a seguir ilustram a evolu√ß√£o temporal do consumo de Globoplay, segmentado por diferentes 
    categorias e comparado com a audi√™ncia da TV Linear (quando dispon√≠vel). Estes gr√°ficos permitem 
    identificar tend√™ncias, sazonalidades e rela√ß√µes entre streaming e TV tradicional.
    
    Observe padr√µes como:
    - Picos de consumo em determinados per√≠odos
    - Diferen√ßas no comportamento entre segmentos de usu√°rios
    - Rela√ß√£o entre audi√™ncia de streaming e TV Linear
    """)
    
    # Only include visualizations if we have the necessary data
    
    # Row 1 - Assinantes vs Logados vs An√¥nimos
    has_user_data = any(col in selected_df.columns for col in [
        'GP_horas_consumidas_assinantes', 
        'GP_horas_consumidas_de_logados_free', 
        'GP_horas_consumidas_de_anonimos'
    ])
    
    if has_user_data:
        st.markdown("#### Engajamento por Tipo de Usu√°rio vs. TV Linear")
        
        # Prepare data for the chart
        plot_data = pd.DataFrame({'Data': selected_df['data_hora']})
        
        if 'GP_horas_consumidas_assinantes' in selected_df.columns:
            plot_data['Horas Consumidas Assinantes'] = selected_df['GP_horas_consumidas_assinantes']
        
        if 'GP_horas_consumidas_de_logados_free' in selected_df.columns:
            plot_data['Horas Consumidas Logados Free'] = selected_df['GP_horas_consumidas_de_logados_free']
        
        if 'GP_horas_consumidas_de_anonimos' in selected_df.columns:
            plot_data['Horas Consumidas An√¥nimos'] = selected_df['GP_horas_consumidas_de_anonimos']
        
        if 'LINEAR_GLOBO_cov%' in selected_df.columns:
            plot_data['cov% TV Linear'] = selected_df['LINEAR_GLOBO_cov%']
        
        # Get y-columns (exclude 'Data')
        y_cols = [col for col in plot_data.columns if col != 'Data']
        
        if y_cols:  # Only create chart if we have y data
            # Separar as colunas para eixos esquerdo e direito
            left_y_cols = [col for col in y_cols if col != 'cov% TV Linear']
            right_y_cols = ['cov% TV Linear'] if 'cov% TV Linear' in y_cols else []
            
            # Criar figura com subplots compartilhando o eixo x
            fig = make_subplots(specs=[[{"secondary_y": True}]])
            
            # Adicionar linhas para o eixo esquerdo
            for col in left_y_cols:
                fig.add_trace(
                    go.Scatter(x=plot_data['Data'], y=plot_data[col], name=col),
                    secondary_y=False
                )
            
            # Adicionar linhas para o eixo direito
            for col in right_y_cols:
                fig.add_trace(
                    go.Scatter(x=plot_data['Data'], y=plot_data[col], name=col),
                    secondary_y=True
                )
            
            # Atualizar t√≠tulos dos eixos
            fig.update_yaxes(title_text="Horas Consumidas", secondary_y=False)
            fig.update_yaxes(title_text="Coverage %", secondary_y=True)
            fig.update_xaxes(title_text="Data")
            
            # Configurar layout
            fig.update_layout(
                title=f"Engajamento por Tipo de Usu√°rio - {granularity}",
                font=dict(family="Roboto, Arial", color="#212121"),
                legend=dict(orientation="h", y=1.1),
                margin=dict(t=50, l=50, r=20, b=50),
                hovermode="x unified"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            st.markdown("""
            **Interpreta√ß√£o:** Este gr√°fico mostra como o consumo varia entre diferentes tipos de usu√°rios ao longo do tempo.
            Observe que assinantes geralmente t√™m maior consumo por pessoa, enquanto usu√°rios logados free e an√¥nimos
            apresentam padr√µes de consumo mais leves. A linha de cobertura TV Linear permite avaliar se h√°
            complementaridade ou canibaliza√ß√£o entre streaming e TV tradicional.
            """)
        
    # Row 2 - Mobile vs Outros Devices
    has_device_data = any(col in selected_df.columns for col in [
        'GP_horas_consumidas_mobile', 
        'GP_horas_consumidas_em_demais_devices'
    ])
    
    if has_device_data:
        st.markdown("#### Engajamento por Tipo de Device vs. TV Linear")
        
        # Prepare data for the chart
        plot_data = pd.DataFrame({'Data': selected_df['data_hora']})
        
        if 'GP_horas_consumidas_mobile' in selected_df.columns:
            plot_data['Horas Consumidas Mobile'] = selected_df['GP_horas_consumidas_mobile']
        
        if 'GP_horas_consumidas_em_demais_devices' in selected_df.columns:
            plot_data['Horas Consumidas Outros Devices'] = selected_df['GP_horas_consumidas_em_demais_devices']
        
        if 'LINEAR_GLOBO_cov%' in selected_df.columns:
            plot_data['cov% TV Linear'] = selected_df['LINEAR_GLOBO_cov%']
        
        # Get y-columns (exclude 'Data')
        y_cols = [col for col in plot_data.columns if col != 'Data']
        
        if y_cols:  # Only create chart if we have y data
            # Separar as colunas para eixos esquerdo e direito
            left_y_cols = [col for col in y_cols if col != 'cov% TV Linear']
            right_y_cols = ['cov% TV Linear'] if 'cov% TV Linear' in y_cols else []
            
            # Importar m√≥dulos necess√°rios (adicione no in√≠cio do arquivo)
            # from plotly.subplots import make_subplots
            # import plotly.graph_objects as go
            
            # Criar figura com subplots compartilhando o eixo x
            fig = make_subplots(specs=[[{"secondary_y": True}]])
            
            # Adicionar linhas para o eixo esquerdo
            for col in left_y_cols:
                fig.add_trace(
                    go.Scatter(x=plot_data['Data'], y=plot_data[col], name=col),
                    secondary_y=False
                )
            
            # Adicionar linhas para o eixo direito
            for col in right_y_cols:
                fig.add_trace(
                    go.Scatter(x=plot_data['Data'], y=plot_data[col], name=col),
                    secondary_y=True
                )
            
            # Atualizar t√≠tulos dos eixos
            fig.update_yaxes(title_text="Horas Consumidas", secondary_y=False)
            fig.update_yaxes(title_text="Coverage %", secondary_y=True)
            fig.update_xaxes(title_text="Data")
            
            # Configurar layout
            fig.update_layout(
                title=f"Engajamento por Tipo de Device - {granularity}",
                font=dict(family="Roboto, Arial", color="#212121"),
                legend=dict(orientation="h", y=1.1),
                margin=dict(t=50, l=50, r=20, b=50),
                hovermode="x unified"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            st.markdown("""
            **Interpreta√ß√£o:** Este gr√°fico ilustra como o consumo se distribui entre dispositivos m√≥veis e outros tipos de tela.
            Tend√™ncias crescentes no consumo mobile podem indicar mudan√ßas importantes no comportamento da audi√™ncia,
            como maior consumo em deslocamento ou prefer√™ncia por telas menores para determinados conte√∫dos.
            Observe tamb√©m como eventos sazonais podem afetar diferentemente o consumo em cada tipo de dispositivo.
            """)
    
    # Row 3 - Simulcasting vs VOD
    has_content_data = any(col in selected_df.columns for col in [
        'GP_horas_consumidas_em_tvg_ao_vivo', 
        'GP_qtd_de_horas_dispon√≠veis_integras'
    ])
    
    if has_content_data:
        st.markdown("#### Simulcasting vs VOD vs. TV Linear")
        
        # Prepare data for the chart
        plot_data = pd.DataFrame({'Data': selected_df['data_hora']})
        
        if 'GP_horas_consumidas_em_tvg_ao_vivo' in selected_df.columns:
            plot_data['Horas Consumidas TVG ao Vivo'] = selected_df['GP_horas_consumidas_em_tvg_ao_vivo']
        
        if 'GP_qtd_de_horas_dispon√≠veis_integras' in selected_df.columns:
            plot_data['Horas Dispon√≠veis VOD'] = selected_df['GP_qtd_de_horas_dispon√≠veis_integras']
        
        if 'LINEAR_GLOBO_cov%' in selected_df.columns:
            plot_data['cov% TV Linear'] = selected_df['LINEAR_GLOBO_cov%']
        
        # Get y-columns (exclude 'Data')
        y_cols = [col for col in plot_data.columns if col != 'Data']
        
        if y_cols:  # Only create chart if we have y data
            # Vamos supor que queremos 'cov% TV Linear' no eixo direito
            left_y_cols = [col for col in y_cols if col != 'cov% TV Linear']
            right_y_cols = ['cov% TV Linear'] if 'cov% TV Linear' in y_cols else []
            
            # Criar figura com subplots compartilhando o eixo x
            fig = make_subplots(specs=[[{"secondary_y": True}]])
            
            # Adicionar linhas para o eixo esquerdo
            for col in left_y_cols:
                fig.add_trace(
                    go.Scatter(x=plot_data['Data'], y=plot_data[col], name=col),
                    secondary_y=False
                )
            
            # Adicionar linhas para o eixo direito
            for col in right_y_cols:
                fig.add_trace(
                    go.Scatter(x=plot_data['Data'], y=plot_data[col], name=col),
                    secondary_y=True
                )
            
            # Atualizar t√≠tulos dos eixos
            fig.update_yaxes(title_text="Horas", secondary_y=False)
            fig.update_yaxes(title_text="Coverage %", secondary_y=True)
            fig.update_xaxes(title_text="Data")
            
            # Configurar layout
            fig.update_layout(
                title=f"Simulcasting vs VOD - {granularity}",
                font=dict(family="Roboto, Arial", color="#212121"),
                legend=dict(orientation="h", y=1.1),
                margin=dict(t=50, l=50, r=20, b=50),
                hovermode="x unified"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            st.markdown("""
            **Interpreta√ß√£o:** Este gr√°fico compara o consumo de conte√∫do ao vivo (simulcasting) versus conte√∫do sob demanda (VOD).
            Observe como eventos especiais ou temporadas de programas populares podem causar picos no consumo ao vivo,
            enquanto o consumo VOD tende a ser mais est√°vel ao longo do tempo. A rela√ß√£o com a audi√™ncia de TV Linear
            fornece insights sobre a poss√≠vel complementaridade ou competi√ß√£o entre estas modalidades de consumo.
            """)
    
    # 4. Notes and Documentation
    st.subheader("Notas e Documenta√ß√£o")
    
    with st.expander("Informa√ß√µes sobre os dados"):
        st.markdown("""
        ### Fonte dos Dados
        
        Os dados de consumo do Globoplay s√£o coletados internamente atrav√©s do sistema de 
        tracking da plataforma. Estes dados refletem a atividade real dos usu√°rios, incluindo 
        tempo de visualiza√ß√£o, dispositivos utilizados e tipo de conte√∫do consumido.
        
        ### M√©tricas Dispon√≠veis
        
        - **Usu√°rios**: Contagem √∫nica de usu√°rios que acessaram a plataforma.
        - **Horas Consumidas**: Total de horas de conte√∫do assistidas pelos usu√°rios.
        - **Quantidade de √çntegras**: N√∫mero total de v√≠deos completos disponibilizados.
        - **TVG ao Vivo**: M√©tricas relacionadas ao consumo de TV Globo ao vivo (simulcasting).
        - **VOD (Video On Demand)**: M√©tricas relacionadas ao consumo de conte√∫do sob demanda.
        
        ### Tipos de Usu√°rios
        
        - **Assinantes**: Usu√°rios com assinatura paga do Globoplay.
        - **Logados Free**: Usu√°rios com cadastro na plataforma, mas sem assinatura paga.
        - **An√¥nimos**: Usu√°rios que acessam conte√∫dos gratuitos sem fazer login.
        """)